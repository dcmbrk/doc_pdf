import streamlit as st
import pdfplumber
import re
import pandas as pd

def parse_invoice_data(text: str, tables: list) -> dict:
    """
    Ph√¢n t√≠ch vƒÉn b·∫£n v√† b·∫£ng v·ªõi logic ph·ª©c t·∫°p h∆°n ƒë·ªÉ x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p
    vƒÉn b·∫£n b·ªã l·ªói c·∫•u tr√∫c.
    """
    extracted_data = {}
    
    # --- B·ªò REGEX LINH HO·∫†T ---
    patterns = {
        "ten_cong_ty_ban": r"C√îNG TY C·ªî PH·∫¶N √î T√î XUY√äN VI·ªÜT",
        "mst_ban": r"M√£ s·ªë thu·∫ø\s*\(Tax code\):\s*(\d+)",
        "dia_chi_ban": r"ƒê·ªãa ch·ªâ\s*\(Address\):\s*(.*?)(?=\n\s*ƒêi·ªán tho·∫°i)",
        "dien_thoai": r"ƒêi·ªán tho·∫°i\s*\(Tel\):\s*(.*?)\n",
        "so_tai_khoan_ngan_hang": r"S·ªë t√†i kho·∫£n\s*\(Bank account\):\s*(.*?)(?=\s*H√ìA ƒê∆†N GI√Å TR·ªä GIA TƒÇNG)",
        "ky_hieu": r"K√Ω hi·ªáu\s*\(Serial\):\s*([A-Z0-9]+)",
        "so_hoa_don": r"S·ªë\s*\(No\.\):\s*(\d+)",
        "ngay_thang_nam": r"Ng√†y\s*\(Date\)\s*(\d{2})\s*th√°ng\s*\(month\)\s*(\d{2})\s*nƒÉm\s*\(year\)\s*(\d{4})",
        "ma_cqt": r"M√£ CQT\s*\(Code\):\s*([A-Z0-9]+)",
        "ten_nguoi_mua": r"H·ªç t√™n ng∆∞·ªùi mua h√†ng\s*\(Buyer\):\s*(.*?)\n",
        "ten_cong_ty_mua": r"T√™n ƒë∆°n v·ªã\s*\(Company's name\):\s*(.*?)\n",
        "mst_mua": r"T√™n ƒë∆°n v·ªã.*?M√£ s·ªë thu·∫ø\s*\(Tax code\):\s*(\d+)",
        "dia_chi_mua": r"ƒê·ªãa ch·ªâ\s*\(Address\):\s*(T·∫ßng 3,.*?Nam)",
        "hinh_thuc_thanh_toan": r"H√¨nh th·ª©c thanh to√°n\s*\(Payment method\):\s*(.*?)\n",
        "cong_tien_hang": r"C·ªông ti·ªÅn h√†ng\s*\(Total amount excl\. VAT\):\s*([\d.,]+)",
        "thue_suat_gtgt": r"Thu·∫ø su·∫•t GTGT\s*\(VAT rate\):\s*(.*?)\s*Ti·ªÅn thu·∫ø GTGT",
        "tien_thue_gtgt": r"Ti·ªÅn thu·∫ø GTGT\s*\(VAT amount\):\s*([\d.,]+)",
        "tong_tien_thanh_toan": r"T·ªïng ti·ªÅn thanh to√°n\s*\(Total amount\):\s*([\d.,]+)",
        "so_tien_bang_chu": r"S·ªë ti·ªÅn vi·∫øt b·∫±ng ch·ªØ\s*\(Total amount in words\):\s*(.*?)\.",
        "ky_boi": r"K√Ω b·ªüi\s*\(Signed By\):\s*(.*?)\n",
        "ky_ngay": r"K√Ω ng√†y\s*\(Signing Date\):\s*(.*?)\n",
        "ma_tra_cuu": r"M√£ tra c·ª©u\s*\(Invoice code\):\s*([\w_]+)"
    }

    def clean_text(s):
        return ' '.join(s.strip().replace('\n', ' ').split()) if s else ""

    # 1. Tr√≠ch xu·∫•t th√¥ng tin chung t·ª´ vƒÉn b·∫£n
    for key, pattern in patterns.items():
        matches = re.findall(pattern, text, re.DOTALL)
        if matches:
            if key == "ngay_thang_nam":
                extracted_data["Ng√†y"], extracted_data["Th√°ng"], extracted_data["NƒÉm"] = matches[0]
            elif key == "so_tai_khoan_ngan_hang":
                parts = matches[0].split('-', 1)
                extracted_data['so_tai_khoan'] = clean_text(parts[0])
                extracted_data['ngan_hang'] = clean_text(parts[1]) if len(parts) > 1 else ""
            elif key == 'mst_mua':
                extracted_data[key] = clean_text(matches[1]) if len(matches) > 1 else clean_text(matches[0])
            else:
                extracted_data[key] = clean_text(matches[0])
        else:
             if key not in ['Ng√†y', 'Th√°ng', 'NƒÉm', 'so_tai_khoan', 'ngan_hang']:
                 extracted_data[key] = None
    
    # 2. Tr√≠ch xu·∫•t chi ti·∫øt h√†ng h√≥a (∆Øu ti√™n t·ª´ B·∫£ng)
    items_found_in_table = False
    if tables:
        for table_data in tables:
            if not table_data or len(table_data) < 2: continue
            header = table_data[0]
            if header and len(header) > 2 and header[0] and 'STT' in header[0] and header[1] and 'T√™n h√†ng h√≥a' in header[1]:
                df = pd.DataFrame(table_data[1:], columns=header)
                items = []
                for _, row in df.iterrows():
                    stt, ten_hang, thanh_tien = row.get(header[0]), row.get(header[1]), row.get(header[2])
                    if stt and ten_hang:
                        items.append({
                            "STT": clean_text(stt),
                            "T√™n H√†ng h√≥a, d·ªãch v·ª•": clean_text(ten_hang),
                            "Th√†nh ti·ªÅn (VND)": clean_text(thanh_tien)
                        })
                if items:
                    extracted_data['chi_tiet_hang_hoa'] = items
                    items_found_in_table = True
                break
    
    # 3. PH∆Ø∆†NG √ÅN D·ª∞ PH√íNG: N·∫øu kh√¥ng t√¨m th·∫•y trong b·∫£ng, "ph·∫´u thu·∫≠t" vƒÉn b·∫£n th√¥
    if not items_found_in_table:
        try:
            total_excl_vat_match = re.search(r"C·ªông ti·ªÅn h√†ng\s*\(Total amount excl\. VAT\):\s*([\d.,]+)", text)
            if total_excl_vat_match:
                amount_str = total_excl_vat_match.group(1)
                
                block_match = re.search(r"\(Amount\)(.*?)\s*C·ªông ti·ªÅn h√†ng", text, re.DOTALL)
                if block_match:
                    messy_block = block_match.group(1)
                    
                    stt_match = re.search(r"^\s*(\d+)", messy_block.strip())
                    stt = stt_match.group(1) if stt_match else "1"
                    
                    # D·ªçn d·∫πp chu·ªói m√¥ t·∫£
                    description = messy_block.replace(amount_str, "")
                    description = re.sub(r'\(ƒë·ª£t\s*\d+\s*(\d+)\)', r'(ƒë·ª£t \1)', description) # S·ª≠a l·ªói 'ƒë·ª£t 1 3'
                    
                    extracted_data['chi_tiet_hang_hoa'] = [{
                        "STT": clean_text(stt),
                        "T√™n H√†ng h√≥a, d·ªãch v·ª•": clean_text(description),
                        "Th√†nh ti·ªÅn (VND)": clean_text(amount_str)
                    }]
        except Exception:
            # N·∫øu t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i, g√°n l√† None
            extracted_data['chi_tiet_hang_hoa'] = None

    return extracted_data

# --- Giao di·ªán ·ª©ng d·ª•ng Streamlit (Gi·ªØ nguy√™n nh∆∞ c≈©) ---
st.set_page_config(layout="wide", page_title="Tr√≠ch xu·∫•t H√≥a ƒë∆°n PDF")
st.title("üìÑ Tr√¨nh tr√≠ch xu·∫•t Th√¥ng tin H√≥a ƒë∆°n PDF (Phi√™n b·∫£n ·ªîn ƒë·ªãnh)")
uploaded_file = st.file_uploader("T·∫£i file PDF c·ªßa b·∫°n t·∫°i ƒë√¢y", type="pdf")

if uploaded_file is not None:
    full_text, tables = "", []
    with st.spinner('ƒêang ƒë·ªçc c·∫•u tr√∫c file PDF...'):
        try:
            with pdfplumber.open(uploaded_file) as pdf:
                for page in pdf.pages:
                    full_text += (page.extract_text(x_tolerance=2) or "") + "\n"
                    tables.extend(page.extract_tables() or [])
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc file PDF. L·ªói: {e}"); st.stop()
    
    with st.expander("Xem d·ªØ li·ªáu th√¥ ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ PDF"):
        st.text_area("VƒÉn b·∫£n g·ªëc:", full_text, height=300)
        st.json(tables)

    st.markdown("---"); st.header("K·∫øt qu·∫£ ph√¢n t√≠ch t·ª± ƒë·ªông")
    
    if full_text or tables:
        with st.spinner("ƒêang ph√¢n t√≠ch d·ªØ li·ªáu..."):
            data = parse_invoice_data(full_text, tables)
            
            if not data.get('so_hoa_don'):
                 st.error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t th√¥ng tin c∆° b·∫£n. Vui l√≤ng ki·ªÉm tra vƒÉn b·∫£n g·ªëc ·ªü tr√™n.")
            else:
                st.success('Tr√≠ch xu·∫•t th√†nh c√¥ng!')
                with st.container(border=True):
                    st.subheader("1. Th√¥ng tin chung H√≥a ƒë∆°n"); col1, col2, col3, col4 = st.columns(4)
                    col1.text(f"S·ªë h√≥a ƒë∆°n: {data.get('so_hoa_don', 'N/A')}"); col2.text(f"K√Ω hi·ªáu: {data.get('ky_hieu', 'N/A')}")
                    ngay_thang_nam = f"{data.get('Ng√†y', '..')}/{data.get('Th√°ng', '..')}/{data.get('NƒÉm', '....')}"
                    col3.text(f"Ng√†y, th√°ng, nƒÉm: {ngay_thang_nam}"); col4.text(f"M√£ CQT: {data.get('ma_cqt', 'N/A')}")
                with st.container(border=True):
                    st.subheader("2. Th√¥ng tin c√°c b√™n"); col_ban, col_mua = st.columns(2)
                    with col_ban:
                        st.markdown("**B√™n B√°n**"); st.text(f"T√™n c√¥ng ty: {data.get('ten_cong_ty_ban', 'N/A')}"); st.text(f"M√£ s·ªë thu·∫ø: {data.get('mst_ban', 'N/A')}"); st.text(f"ƒê·ªãa ch·ªâ: {data.get('dia_chi_ban', 'N/A')}"); st.text(f"ƒêi·ªán tho·∫°i: {data.get('dien_thoai', 'N/A')}"); st.text(f"T√†i kho·∫£n: {data.get('so_tai_khoan', 'N/A')} t·∫°i {data.get('ngan_hang', 'N/A')}")
                    with col_mua:
                        st.markdown("**B√™n Mua**"); st.text(f"T√™n c√¥ng ty: {data.get('ten_cong_ty_mua', 'N/A')}"); st.text(f"H·ªç t√™n ng∆∞·ªùi mua: {data.get('ten_nguoi_mua') or '(Kh√¥ng c√≥)'}"); st.text(f"M√£ s·ªë thu·∫ø: {data.get('mst_mua', 'N/A')}"); st.text(f"ƒê·ªãa ch·ªâ: {data.get('dia_chi_mua', 'N/A')}"); st.text(f"H√¨nh th·ª©c thanh to√°n: {data.get('hinh_thuc_thanh_toan', 'N/A')}")
                with st.container(border=True):
                    st.subheader("3. Chi ti·∫øt h√†ng h√≥a, d·ªãch v·ª•")
                    if data.get('chi_tiet_hang_hoa'):
                        st.table(pd.DataFrame(data['chi_tiet_hang_hoa']))
                    else:
                        st.error("Kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c b·∫£ng chi ti·∫øt h√†ng h√≥a.")
                with st.container(border=True):
                    st.subheader("4. T·ªïng c·ªông thanh to√°n"); col_sum_1, col_sum_2 = st.columns(2)
                    with col_sum_1:
                        st.text(f"C·ªông ti·ªÅn h√†ng (ch∆∞a VAT): {data.get('cong_tien_hang', 'N/A')}"); st.text(f"Thu·∫ø su·∫•t GTGT: {data.get('thue_suat_gtgt', 'N/A')}"); st.text(f"Ti·ªÅn thu·∫ø GTGT: {data.get('tien_thue_gtgt', 'N/A')}"); st.success(f"T·ªïng ti·ªÅn thanh to√°n: {data.get('tong_tien_thanh_toan', 'N/A')}")
                    with col_sum_2:
                        st.markdown("**S·ªë ti·ªÅn vi·∫øt b·∫±ng ch·ªØ:**"); st.info(f"{data.get('so_tien_bang_chu', 'N/A')}.")
                with st.container(border=True):
                    st.subheader("5. Th√¥ng tin Ch·ªØ k√Ω v√† Tra c·ª©u"); col_sign_1, col_sign_2, col_sign_3 = st.columns(3)
                    col_sign_1.text(f"K√Ω b·ªüi: {data.get('ky_boi', 'N/A')}"); col_sign_2.text(f"Ng√†y k√Ω: {data.get('ky_ngay', 'N/A')}"); col_sign_3.text(f"M√£ tra c·ª©u: {data.get('ma_tra_cuu', 'N/A')}")