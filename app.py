import streamlit as st
import pdfplumber
import re
import pandas as pd
from typing import Dict, Any

def parse_invoice_data(text: str) -> Dict[str, Any]:
    """
    H√†m ph√¢n t√≠ch h√≥a ƒë∆°n v·ªõi logic x·ª≠ l√Ω t·ª´ng d√≤ng ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªô ch√≠nh x√°c
    v√† gi·∫£i quy·∫øt tri·ªát ƒë·ªÉ v·∫•n ƒë·ªÅ th√¥ng tin b·ªã d√≠nh li·ªÅn.
    """
    data = {}
    lines = text.split('\n')

    def clean_text(s: str) -> str:
        return ' '.join(s.strip().split()) if s and isinstance(s, str) else ""

    # --- X·ª≠ l√Ω t·ª´ng d√≤ng vƒÉn b·∫£n ---
    for i, line in enumerate(lines):
        line = clean_text(line)

        # S·ª≠ d·ª•ng if/elif ƒë·ªÉ tr√°nh m·ªôt d√≤ng b·ªã x·ª≠ l√Ω nhi·ªÅu l·∫ßn
        if "C√îNG TY C·ªî PH·∫¶N √î T√î XUY√äN VI·ªÜT" in line and "ten_cong_ty_ban" not in data:
            data["ten_cong_ty_ban"] = line
        
        elif "M√£ s·ªë thu·∫ø (Tax code):" in line:
            value = clean_text(line.split(":")[-1])
            if "mst_ban" not in data:
                data["mst_ban"] = value
            else:
                data["mst_mua"] = value
        
        elif "ƒê·ªãa ch·ªâ (Address):" in line:
            full_value = line.split(":", 1)[-1]
            address = full_value
            # T√°ch c√°c tr∆∞·ªùng b·ªã d√≠nh li·ªÅn
            if "ƒêi·ªán tho·∫°i (Tel):" in full_value:
                address = full_value.split("ƒêi·ªán tho·∫°i (Tel):")[0]
            
            value = clean_text(address)
            # Ph√¢n bi·ªát ƒë·ªãa ch·ªâ b√™n b√°n v√† b√™n mua d·ª±a v√†o n·ªôi dung
            if ("T·∫ßng 6" in value or "T·∫ßng 6" in line) and "dia_chi_ban" not in data:
                data["dia_chi_ban"] = value
            else:
                data["dia_chi_mua"] = value

        elif "ƒêi·ªán tho·∫°i (Tel):" in line and "dien_thoai" not in data:
            full_value = line.split(":", 1)[-1]
            phone = full_value.split("S·ªë t√†i kho·∫£n")[0]
            data["dien_thoai"] = clean_text(phone)

        elif "S·ªë t√†i kho·∫£n (Bank account):" in line and "so_tai_khoan" not in data:
            full_value = line.split(":", 1)[-1]
            account_info = full_value.split("H√ìA ƒê∆†N GI√Å TR·ªä GIA TƒÇNG")[0]
            parts = account_info.split('-', 1)
            data['so_tai_khoan'] = clean_text(parts[0])
            data['ngan_hang'] = clean_text(parts[1]) if len(parts) > 1 else ""

        elif "K√Ω hi·ªáu (Serial):" in line and "ky_hieu" not in data:
            match = re.search(r"K√Ω hi·ªáu \(Serial\):\s*([A-Z0-9]+)", line)
            if match: data["ky_hieu"] = match.group(1)

        elif "S·ªë (No.):" in line and "so_hoa_don" not in data:
            match = re.search(r"S·ªë \(No\.\):\s*(\d+)", line)
            if match: data["so_hoa_don"] = match.group(1)

        elif "Ng√†y (Date)" in line and "Ng√†y" not in data:
            match = re.search(r"(\d{2})\s*th√°ng\s*\(month\)\s*(\d{2})\s*nƒÉm\s*\(year\)\s*(\d{4})", line)
            if match: data["Ng√†y"], data["Th√°ng"], data["NƒÉm"] = match.groups()
        
        elif "M√£ CQT (Code):" in line and "ma_cqt" not in data:
             data["ma_cqt"] = clean_text(line.split(":")[-1])

        elif "T√™n ƒë∆°n v·ªã (Company's name):" in line and "ten_cong_ty_mua" not in data:
             data["ten_cong_ty_mua"] = clean_text(line.split(":")[-1])
        
        elif "H√¨nh th·ª©c thanh to√°n (Payment method):" in line and "hinh_thuc_thanh_toan" not in data:
             data["hinh_thuc_thanh_toan"] = clean_text(line.split(":")[-1])
        
        elif "C·ªông ti·ªÅn h√†ng (Total amount excl. VAT):" in line and "cong_tien_hang" not in data:
             data["cong_tien_hang"] = clean_text(line.split(":")[-1])
        
        elif "Thu·∫ø su·∫•t GTGT (VAT rate):" in line and "thue_suat_gtgt" not in data:
             match_rate = re.search(r'(\d+%)', line)
             if match_rate: data["thue_suat_gtgt"] = match_rate.group(1)
             match_amount = re.search(r"Ti·ªÅn thu·∫ø GTGT \(VAT amount\):\s*([\d.,]+)", line)
             if match_amount: data["tien_thue_gtgt"] = match_amount.group(1)

        elif "T·ªïng ti·ªÅn thanh to√°n (Total amount):" in line and "tong_tien_thanh_toan" not in data:
             data["tong_tien_thanh_toan"] = clean_text(line.split(":")[-1])

        elif "S·ªë ti·ªÅn vi·∫øt b·∫±ng ch·ªØ (Total amount in words):" in line and "so_tien_bang_chu" not in data:
             data["so_tien_bang_chu"] = clean_text(line.split(":")[-1]).replace(".", "")
        
        elif "K√Ω b·ªüi (Signed By):" in line and "ky_boi" not in data:
             data["ky_boi"] = clean_text(line.split(":")[-1])
        
        elif "K√Ω ng√†y (Signing Date):" in line and "ky_ngay" not in data:
             data["ky_ngay"] = clean_text(line.split(":")[-1])

        elif "M√£ tra c·ª©u (Invoice code):" in line and "ma_tra_cuu" not in data:
             data["ma_tra_cuu"] = clean_text(line.split(":")[-1])

    # --- X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho chi ti·∫øt h√†ng h√≥a ---
    try:
        amount_str = data.get("cong_tien_hang")
        block_match = re.search(r"\(Amount\)(.*?)\s*C·ªông ti·ªÅn h√†ng", text, re.DOTALL)
        if amount_str and block_match:
            messy_block = block_match.group(1).strip()
            
            stt_match = re.search(r"^\s*(\d+)", messy_block)
            stt = stt_match.group(1) if stt_match else "1"
            
            # --- LOGIC L√ÄM S·∫†CH ƒê√É S·ª¨A L·ªñI ---
            # B·∫Øt ƒë·∫ßu v·ªõi to√†n b·ªô kh·ªëi vƒÉn b·∫£n l·ªôn x·ªôn
            description = messy_block
            
            # B∆∞·ªõc 1: Ch·ªâ lo·∫°i b·ªè ch√≠nh x√°c chu·ªói s·ªë ti·ªÅn ƒë√£ bi·∫øt
            description = description.replace(amount_str, "")

            # B∆∞·ªõc 2: Lo·∫°i b·ªè s·ªë STT ·ªü ƒë·∫ßu chu·ªói
            description = re.sub(r"^\s*\d+\s*", "", description)
            
            # B∆∞·ªõc 3: S·ª≠a c√°c l·ªói vƒÉn b·∫£n c·ª• th·ªÉ n·∫øu c√≥
            description = re.sub(r'\(ƒë·ª£t\s*\d+\s*(\d+)\)', r'(ƒë·ª£t \1)', description)
            
            # G√°n k·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch
            data['chi_tiet_hang_hoa'] = [{
                "STT": clean_text(stt),
                "T√™n H√†ng h√≥a, d·ªãch v·ª•": clean_text(description),
                "Th√†nh ti·ªÅn (VND)": clean_text(amount_str)
            }]
    except Exception:
        data['chi_tiet_hang_hoa'] = None
        
    return data


# --- Giao di·ªán ·ª©ng d·ª•ng Streamlit ---
st.set_page_config(layout="wide", page_title="Tr√≠ch xu·∫•t H√≥a ƒë∆°n PDF")
st.title("üìÑ Tr√¨nh tr√≠ch xu·∫•t H√≥a ƒë∆°n PDF (Phi√™n b·∫£n x·ª≠ l√Ω t·ª´ng d√≤ng)")
uploaded_file = st.file_uploader("T·∫£i file PDF c·ªßa b·∫°n t·∫°i ƒë√¢y", type="pdf")

if uploaded_file is not None:
    full_text = ""
    with st.spinner('ƒêang ƒë·ªçc file PDF...'):
        try:
            with pdfplumber.open(uploaded_file) as pdf:
                for page in pdf.pages:
                    full_text += (page.extract_text(x_tolerance=2, y_tolerance=2) or "") + "\n"
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc file PDF. L·ªói: {e}"); st.stop()

    with st.expander("Xem vƒÉn b·∫£n g·ªëc ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ PDF"):
        st.text_area("VƒÉn b·∫£n g·ªëc:", full_text, height=300)

    st.markdown("---"); st.header("K·∫øt qu·∫£ ph√¢n t√≠ch t·ª± ƒë·ªông")
    
    if full_text:
        with st.spinner("ƒêang ph√¢n t√≠ch d·ªØ li·ªáu..."):
            data = parse_invoice_data(full_text)
            
            all_keys = ['so_hoa_don', 'ky_hieu', 'Ng√†y', 'Th√°ng', 'NƒÉm', 'ma_cqt', 'ten_cong_ty_ban', 'mst_ban', 'dia_chi_ban', 'dien_thoai', 'so_tai_khoan', 'ngan_hang', 'ten_cong_ty_mua', 'ten_nguoi_mua', 'mst_mua', 'dia_chi_mua', 'hinh_thuc_thanh_toan', 'cong_tien_hang', 'thue_suat_gtgt', 'tien_thue_gtgt', 'tong_tien_thanh_toan', 'so_tien_bang_chu', 'ky_boi', 'ky_ngay', 'ma_tra_cuu']
            for key in all_keys: data.setdefault(key, 'N/A')

            if data.get('so_hoa_don') == 'N/A' or not data.get('so_hoa_don'):
                 st.error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t th√¥ng tin c∆° b·∫£n. Vui l√≤ng ki·ªÉm tra vƒÉn b·∫£n g·ªëc ·ªü tr√™n.")
            else:
                st.success('Tr√≠ch xu·∫•t th√†nh c√¥ng!')
                with st.container(border=True):
                    st.subheader("1. Th√¥ng tin chung H√≥a ƒë∆°n"); col1, col2, col3, col4 = st.columns(4)
                    col1.text(f"S·ªë h√≥a ƒë∆°n: {data['so_hoa_don']}"); col2.text(f"K√Ω hi·ªáu: {data['ky_hieu']}")
                    ngay_thang_nam = f"{data['Ng√†y']}/{data['Th√°ng']}/{data['NƒÉm']}"
                    col3.text(f"Ng√†y, th√°ng, nƒÉm: {ngay_thang_nam}"); col4.text(f"M√£ CQT: {data['ma_cqt']}")
                with st.container(border=True):
                    st.subheader("2. Th√¥ng tin c√°c b√™n"); col_ban, col_mua = st.columns(2)
                    with col_ban:
                        st.markdown("**B√™n B√°n**"); st.text(f"T√™n c√¥ng ty: {data['ten_cong_ty_ban']}"); st.text(f"M√£ s·ªë thu·∫ø: {data['mst_ban']}"); st.text(f"ƒê·ªãa ch·ªâ: {data['dia_chi_ban']}"); st.text(f"ƒêi·ªán tho·∫°i: {data['dien_thoai']}"); st.text(f"T√†i kho·∫£n: {data.get('so_tai_khoan', '')} t·∫°i {data.get('ngan_hang', '')}")
                    with col_mua:
                        st.markdown("**B√™n Mua**"); st.text(f"T√™n c√¥ng ty: {data['ten_cong_ty_mua']}"); st.text(f"H·ªç t√™n ng∆∞·ªùi mua: {data.get('ten_nguoi_mua') or '(Kh√¥ng c√≥)'}"); st.text(f"M√£ s·ªë thu·∫ø: {data['mst_mua']}"); st.text(f"ƒê·ªãa ch·ªâ: {data['dia_chi_mua']}"); st.text(f"H√¨nh th·ª©c thanh to√°n: {data['hinh_thuc_thanh_toan']}")
                with st.container(border=True):
                    st.subheader("3. Chi ti·∫øt h√†ng h√≥a, d·ªãch v·ª•")
                    if data.get('chi_tiet_hang_hoa'): st.table(pd.DataFrame(data['chi_tiet_hang_hoa']))
                    else: st.error("Kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c b·∫£ng chi ti·∫øt h√†ng h√≥a.")
                with st.container(border=True):
                    st.subheader("4. T·ªïng c·ªông thanh to√°n"); col_sum_1, col_sum_2 = st.columns(2)
                    with col_sum_1:
                        st.text(f"C·ªông ti·ªÅn h√†ng (ch∆∞a VAT): {data['cong_tien_hang']}"); st.text(f"Thu·∫ø su·∫•t GTGT: {data['thue_suat_gtgt']}"); st.text(f"Ti·ªÅn thu·∫ø GTGT: {data['tien_thue_gtgt']}"); st.success(f"T·ªïng ti·ªÅn thanh to√°n: {data['tong_tien_thanh_toan']}")
                    with col_sum_2:
                        st.markdown("**S·ªë ti·ªÅn vi·∫øt b·∫±ng ch·ªØ:**"); st.info(f"{data.get('so_tien_bang_chu', 'N/A')}.")
                with st.container(border=True):
                    st.subheader("5. Th√¥ng tin Ch·ªØ k√Ω v√† Tra c·ª©u"); col_sign_1, col_sign_2, col_sign_3 = st.columns(3)
                    col_sign_1.text(f"K√Ω b·ªüi: {data['ky_boi']}"); col_sign_2.text(f"Ng√†y k√Ω: {data['ky_ngay']}"); col_sign_3.text(f"M√£ tra c·ª©u: {data['ma_tra_cuu']}")